import { createClient } from '@supabase/supabase-js';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Supabase configuration
const supabaseUrl = 'https://ojusijzhshvviqjeyhyn.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9qdXNpanpoc2h2dmlxamV5aHluIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1NjU3MjQsImV4cCI6MjA3MTE0MTcyNH0.rlQ9lIGzoaLTOW-5-W0G1J1A0WwvqZMnhGHW-FwV8GQ';

// Create Supabase client with AsyncStorage for auth persistence
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});

// Database types (we'll generate these from Supabase later)
export interface Profile {
  id: string;
  email: string;
  name: string;
  avatar?: string;
  created_at: string;
}

export interface Goal {
  id: string;
  user_id: string;
  title: string;
  metric: string;
  deadline: string;
  category?: string;
  color?: string;
  why?: string;
  progress?: number;
  status?: string;
  created_at: string;
}

export interface Action {
  id: string;
  user_id: string;
  goal_id?: string;
  title: string;
  time?: string;
  completed: boolean;
  completed_at?: string;
  date: string;
  created_at: string;
}

export interface Post {
  id: string;
  user_id: string;
  type: 'checkin' | 'status' | 'photo' | 'audio' | 'goal';
  visibility: 'circle' | 'follow' | 'public';
  content: string;
  media_url?: string;
  action_title?: string;
  goal_title?: string;
  goal_color?: string;
  streak?: number;
  created_at: string;
  user?: Profile;
  reactions?: Reaction[];
}

export interface Reaction {
  id: string;
  post_id: string;
  user_id: string;
  emoji: string;
  created_at: string;
  user?: Profile;
}

// Helper functions for common operations
export const supabaseHelpers = {
  // Auth helpers
  async signUp(email: string, password: string, name: string) {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: { name }
      }
    });
    return { data, error };
  },

  async signIn(email: string, password: string) {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    return { data, error };
  },

  async signOut() {
    const { error } = await supabase.auth.signOut();
    return { error };
  },

  async getUser() {
    const { data: { user } } = await supabase.auth.getUser();
    return user;
  },

  // Goals helpers
  async getGoals(userId: string) {
    const { data, error } = await supabase
      .from('goals')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    return { data, error };
  },

  async createGoal(goal: Omit<Goal, 'id' | 'created_at'>) {
    const { data, error } = await supabase
      .from('goals')
      .insert(goal)
      .select()
      .single();
    return { data, error };
  },

  async updateGoal(id: string, updates: Partial<Goal>) {
    const { data, error } = await supabase
      .from('goals')
      .update(updates)
      .eq('id', id)
      .select()
      .single();
    return { data, error };
  },

  async deleteGoal(id: string) {
    const { error } = await supabase
      .from('goals')
      .delete()
      .eq('id', id);
    return { error };
  },

  // Actions helpers
  async getDailyActions(userId: string, date: string) {
    const { data, error } = await supabase
      .from('actions')
      .select('*, goals(title, color)')
      .eq('user_id', userId)
      .eq('date', date)
      .order('time', { ascending: true });
    return { data, error };
  },

  async createAction(action: Omit<Action, 'id' | 'created_at'>) {
    const { data, error } = await supabase
      .from('actions')
      .insert(action)
      .select()
      .single();
    return { data, error };
  },

  async completeAction(id: string) {
    const { data, error } = await supabase
      .from('actions')
      .update({ 
        completed: true, 
        completed_at: new Date().toISOString() 
      })
      .eq('id', id)
      .select()
      .single();
    return { data, error };
  },

  // Social helpers
  async getFeed(userId: string, type: 'circle' | 'follow' | 'public' = 'circle') {
    let query = supabase
      .from('posts')
      .select(`
        *,
        user:profiles!user_id(id, name, email, avatar),
        reactions(*, user:profiles!user_id(id, name))
      `)
      .order('created_at', { ascending: false })
      .limit(50);

    // Apply visibility filters based on type
    if (type === 'circle') {
      query = query.or('visibility.eq.circle,visibility.eq.public');
    } else if (type === 'follow') {
      query = query.or('visibility.eq.follow,visibility.eq.public');
    } else {
      query = query.eq('visibility', 'public');
    }

    const { data, error } = await query;
    return { data, error };
  },

  async createPost(post: Omit<Post, 'id' | 'created_at' | 'user' | 'reactions'>) {
    const { data, error } = await supabase
      .from('posts')
      .insert(post)
      .select(`
        *,
        user:profiles!user_id(id, name, email, avatar)
      `)
      .single();
    return { data, error };
  },

  async addReaction(postId: string, userId: string, emoji: string) {
    const { data, error } = await supabase
      .from('reactions')
      .insert({
        post_id: postId,
        user_id: userId,
        emoji
      })
      .select()
      .single();
    return { data, error };
  },

  // Profile helpers
  async getProfile(userId: string) {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    return { data, error };
  },

  async updateProfile(userId: string, updates: Partial<Profile>) {
    const { data, error } = await supabase
      .from('profiles')
      .update(updates)
      .eq('id', userId)
      .select()
      .single();
    return { data, error };
  },
};